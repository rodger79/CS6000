
@inproceedings{mantyla_taxonomy_2003,
	title = {A taxonomy and an initial empirical study of bad smells in code},
	doi = {10.1109/ICSM.2003.1235447},
	booktitle = {International {Conference} on {Software} {Maintenance}, 2003. {ICSM} 2003. {Proceedings}.},
	author = {Mantyla, M. and Vanhanen, J. and Lassenius, C.},
	month = sep,
	year = {2003},
	keywords = {Internet, bad code smells, Cloning, code quality, correlations, empirical study, Logic, object-oriented context, object-oriented programming, program compilers, Programming, software maintenance, Software maintenance, Software measurement, software performance evaluation, software quality, Software quality, Software systems, taxonomy, Taxonomy, Visualization},
	pages = {381--384},
	file = {Mantyla et al. - 2003 - A taxonomy and an initial empirical study of bad s.pdf:/home/rodger/Zotero/storage/E3HQT7RF/Mantyla et al. - 2003 - A taxonomy and an initial empirical study of bad s.pdf:application/pdf}
}

@inproceedings{arcoverde_understanding_2011,
	address = {New York, NY, USA},
	series = {{WRT} '11},
	title = {Understanding the {Longevity} of {Code} {Smells}: {Preliminary} {Results} of an {Explanatory} {Survey}},
	isbn = {978-1-4503-0579-2},
	url = {http://doi.acm.org/10.1145/1984732.1984740},
	doi = {10.1145/1984732.1984740},
	booktitle = {Proceedings of the 4th {Workshop} on {Refactoring} {Tools}},
	publisher = {ACM},
	author = {Arcoverde, Roberta and Garcia, Alessandro and Figueiredo, Eduardo},
	year = {2011},
	note = {event-place: Waikiki, Honolulu, HI, USA},
	keywords = {empirical study, code smells, refactoring},
	pages = {33--36},
	file = {Arcoverde et al. - 2011 - Understanding the Longevity of Code Smells Prelim.pdf:/home/rodger/Zotero/storage/X8X8XNAT/Arcoverde et al. - 2011 - Understanding the Longevity of Code Smells Prelim.pdf:application/pdf}
}

@inproceedings{yamashita_developers_nodate,
	title = {Do developers care about code smells? {An} exploratory survey},
	doi = {10.1109/WCRE.2013.6671299},
	author = {Yamashita, A. and Moonen, L.},
	month = oct,
	pages = {242--251},
	file = {Yamashita and Moonen - Do developers care about code smells An explorato.pdf:/home/rodger/Zotero/storage/YXU7ZHR4/Yamashita and Moonen - Do developers care about code smells An explorato.pdf:application/pdf}
}

@article{garousi_smells_2018,
	title = {Smells in software test code: {A} survey of knowledge in industry and academia},
	volume = {138},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121217303060},
	doi = {https://doi.org/10.1016/j.jss.2017.12.013},
	abstract = {As a type of anti-pattern, test smells are defined as poorly designed tests and their presence may negatively affect the quality of test suites and production code. Test smells are the subject of active discussions among practitioners and researchers, and various guidelines to handle smells are constantly offered for smell prevention, smell detection, and smell correction. Since there is a vast grey literature as well as a large body of research studies in this domain, it is not practical for practitioners and researchers to locate and synthesize such a large literature. Motivated by the above need and to find out what we, as the community, know about smells in test code, we conducted a ‘multivocal’ literature mapping (classification) on both the scientific literature and also practitioners’ grey literature. By surveying all the sources on test smells in both industry (120 sources) and academia (46 sources), 166 sources in total, our review presents the largest catalogue of test smells, along with the summary of guidelines/techniques and the tools to deal with those smells. This article aims to benefit the readers (both practitioners and researchers) by serving as an “index” to the vast body of knowledge in this important area, and by helping them develop high-quality test scripts, and minimize occurrences of test smells and their negative consequences in large test automation projects.},
	journal = {Journal of Systems and Software},
	author = {Garousi, Vahid and Küçük, Barış},
	year = {2018},
	keywords = {Automated testing, Multivocal literature mapping, Software testing, Survey, Systematic mapping, Test anti-patterns, Test automation, Test scripts, Test smells},
	pages = {52 -- 81},
	file = {Garousi and Küçük - 2018 - Smells in software test code A survey of knowledg.pdf:/home/rodger/Zotero/storage/8IJDPDPI/Garousi and Küçük - 2018 - Smells in software test code A survey of knowledg.pdf:application/pdf}
}

@article{yoshioka_survey_2008,
	title = {A survey on security patterns},
	issn = {1349-8614, 1349-8606},
	url = {http://www.nii.ac.jp/pi/n5/5_35.html},
	doi = {10.2201/NiiPi.2008.5.5},
	abstract = {Security has become an important topic for many software systems. Security patterns are reusable solutions to security problems. Although many security patterns and techniques for using them have been proposed, it is still difﬁcult to adapt security patterns to each phase of software development. This paper provides a survey of approaches to security patterns. As a result of classifying these approaches, a direction for the integration and future research topics is illustrated.},
	language = {en},
	number = {5},
	urldate = {2019-09-22},
	journal = {Progress in Informatics},
	author = {Yoshioka, Nobukazu and Washizaki, Hironori and Maruyama, Katsuhisa},
	month = mar,
	year = {2008},
	pages = {35},
	annote = {This is a security pattern paper not an anti pattern paper, also very old.},
	file = {Yoshioka et al. - 2008 - A survey on security patterns.pdf:/home/rodger/Zotero/storage/7SQCG3TU/Yoshioka et al. - 2008 - A survey on security patterns.pdf:application/pdf}
}

@article{sharma_survey_2018,
	title = {A survey on software smells},
	volume = {138},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121217303114},
	doi = {https://doi.org/10.1016/j.jss.2017.12.034},
	abstract = {Context Smells in software systems impair software quality and make them hard to maintain and evolve. The software engineering community has explored various dimensions concerning smells and produced extensive research related to smells. The plethora of information poses challenges to the community to comprehend the state-of-the-art tools and techniques. Objective We aim to present the current knowledge related to software smells and identify challenges as well as opportunities in the current practices. Method We explore the definitions of smells, their causes as well as effects, and their detection mechanisms presented in the current literature. We studied 445 primary studies in detail, synthesized the information, and documented our observations. Results The study reveals five possible defining characteristics of smells — indicator, poor solution, violates best-practices, impacts quality, and recurrence. We curate ten common factors that cause smells to occur including lack of skill or awareness and priority to features over quality. We classify existing smell detection methods into five groups — metrics, rules/heuristics, history, machine learning, and optimization-based detection. Challenges in the smells detection include the tools’ proneness to false-positives and poor coverage of smells detectable by existing tools.},
	journal = {Journal of Systems and Software},
	author = {Sharma, Tushar and Spinellis, Diomidis},
	year = {2018},
	keywords = {Software quality, Antipatterns, Code smells, Maintainability, Smell detection tools, Software smells, Technical debt},
	pages = {158 -- 173},
	annote = {Kent Beck coined the term code smell.},
	file = {Sharma and Spinellis - 2018 - A survey on software smells.pdf:/home/rodger/Zotero/storage/H23FHZG6/Sharma and Spinellis - 2018 - A survey on software smells.pdf:application/pdf}
}

@inproceedings{gopstein_understanding_2017,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2017},
	title = {Understanding {Misunderstandings} in {Source} {Code}},
	isbn = {978-1-4503-5105-8},
	url = {http://doi.acm.org/10.1145/3106237.3106264},
	doi = {10.1145/3106237.3106264},
	booktitle = {Proceedings of the 2017 11th {Joint} {Meeting} on {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Gopstein, Dan and Iannacone, Jake and Yan, Yu and DeLong, Lois and Zhuang, Yanyan and Yeh, Martin K.-C. and Cappos, Justin},
	year = {2017},
	note = {event-place: Paderborn, Germany},
	keywords = {Program Understanding, Programming Languages},
	pages = {129--139},
	file = {Gopstein et al. - 2017 - Understanding Misunderstandings in Source Code.pdf:/home/rodger/Zotero/storage/9MFMG3I9/Gopstein et al. - 2017 - Understanding Misunderstandings in Source Code.pdf:application/pdf}
}

@article{singh_systematic_2018,
	title = {A systematic literature review: {Refactoring} for disclosing code smells in object oriented software},
	volume = {9},
	issn = {2090-4479},
	url = {http://www.sciencedirect.com/science/article/pii/S2090447917300412},
	doi = {https://doi.org/10.1016/j.asej.2017.03.002},
	abstract = {Context Reusing a design pattern is not always in the favor of developers. Thus, the code starts smelling. The presence of “Code Smells” leads to more difficulties for the developers. This racket of code smells is sometimes called Anti-Patterns. Objective The paper aimed at a systematic literature review of refactoring with respect to code smells. However the review of refactoring is done in general and the identification of code smells and anti-patterns is performed in depth. Method A systematic literature survey has been performed on 238 research items that includes articles from leading Conferences, Workshops and premier journals, theses of researchers and book chapters. Results Several data sets and tools for performing refactoring have been revealed under the specified research questions. Conclusion The work done in the paper is an addition to prior systematic literature surveys. With the study of paper the attentiveness of readers about code smells and anti-patterns will be enhanced.},
	number = {4},
	journal = {Ain Shams Engineering Journal},
	author = {Singh, Satwinder and Kaur, Sharanpreet},
	year = {2018},
	keywords = {Code smells, Anti-patterns, Refactoring},
	pages = {2129 -- 2151},
	file = {Singh and Kaur - 2018 - A systematic literature review Refactoring for di.pdf:/home/rodger/Zotero/storage/LNW3WWX6/Singh and Kaur - 2018 - A systematic literature review Refactoring for di.pdf:application/pdf}
}

@inproceedings{li_dlfinder:_2019,
	address = {Piscataway, NJ, USA},
	series = {{ICSE} '19},
	title = {Dlfinder: {Characterizing} and {Detecting} {Duplicate} {Logging} {Code} {Smells}},
	url = {https://doi.org/10.1109/ICSE.2019.00032},
	doi = {10.1109/ICSE.2019.00032},
	booktitle = {Proceedings of the 41st {International} {Conference} on {Software} {Engineering}},
	publisher = {IEEE Press},
	author = {Li, Zhenhao and Chen, Tse-Hsun (Peter) and Yang, Jinqiu and Shang, Weiyi},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {empirical study, code smell, duplicate log, log, static analysis},
	pages = {152--163},
	file = {Li et al. - 2019 - Dlfinder Characterizing and Detecting Duplicate L.pdf:/home/rodger/Zotero/storage/SH6RJUWB/Li et al. - 2019 - Dlfinder Characterizing and Detecting Duplicate L.pdf:application/pdf}
}

@inproceedings{haque_causes_2018,
	address = {New York, NY, USA},
	series = {{ACMSE} '18},
	title = {Causes, {Impacts}, and {Detection} {Approaches} of {Code} {Smell}: {A} {Survey}},
	isbn = {978-1-4503-5696-1},
	url = {http://doi.acm.org/10.1145/3190645.3190697},
	doi = {10.1145/3190645.3190697},
	booktitle = {Proceedings of the {ACMSE} 2018 {Conference}},
	publisher = {ACM},
	author = {Haque, Md Shariful and Carver, Jeff and Atkison, Travis},
	year = {2018},
	note = {event-place: Richmond, Kentucky},
	keywords = {code smell, software engineering, survey},
	pages = {25:1--25:8},
	file = {Haque et al. - 2018 - Causes, Impacts, and Detection Approaches of Code .pdf:/home/rodger/Zotero/storage/TC4XIDMH/Haque et al. - 2018 - Causes, Impacts, and Detection Approaches of Code .pdf:application/pdf}
}

@article{fontana_are_2019,
	title = {Are architectural smells independent from code smells? {An} empirical study},
	volume = {154},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121219301013},
	doi = {https://doi.org/10.1016/j.jss.2019.04.066},
	abstract = {Background. Architectural smells and code smells are symptoms of bad code or design that can cause different quality problems, such as faults, technical debt, or difficulties with maintenance and evolution. Some studies show that code smells and architectural smells often appear together in the same file. The correlation between code smells and architectural smells, however, is not clear yet; some studies on a limited set of projects have claimed that architectural smells can be derived from code smells, while other studies claim the opposite. Objective. The goal of this work is to understand whether architectural smells are independent from code smells or can be derived from a code smell or from one category of them. Method. We conducted a case study analyzing the correlations among 19 code smells, six categories of code smells, and four architectural smells. Results. The results show that architectural smells are correlated with code smells only in a very low number of occurrences and therefore cannot be derived from code smells. Conclusion. Architectural smells are independent from code smells, and therefore deserve special attention by researchers, who should investigate their actual harmfulness, and practitioners, who should consider whether and when to remove them.},
	journal = {Journal of Systems and Software},
	author = {Fontana, Francesca Arcelli and Lenarduzzi, Valentina and Roveda, Riccardo and Taibi, Davide},
	year = {2019},
	keywords = {Code smells, Technical debt, Architectural smells, Empirical analysis},
	pages = {139 -- 156},
	file = {Fontana et al. - 2019 - Are architectural smells independent from code sme.pdf:/home/rodger/Zotero/storage/V9HY6J4R/Fontana et al. - 2019 - Are architectural smells independent from code sme.pdf:application/pdf}
}

@article{walter_code_2018,
	title = {Code smells and their collocations: {A} large-scale experiment on open-source systems},
	volume = {144},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121218301109},
	doi = {https://doi.org/10.1016/j.jss.2018.05.057},
	abstract = {Code smells indicate possible flaws in software design, that could negatively affect system’s maintainability. Interactions among smells located in the same classes (i.e., collocated smells) have even more detrimental effect on quality. Extracted frequent patterns of collocated smells could help to understand practical consequences of collocations. In this paper we identify and empirically validate frequent collocations of 14 code smells detected in 92 Java systems, using three approaches: pairwise correlation analysis, PCA and associative rules. To cross-validate the results, we used up to 6 detectors for each smell. Additionally, we examine and compare techniques used to extract the relationships. The contribution is three-fold: (1) we identify and empirically validate relationships among the examined code smells on a large dataset that we made publicly available, (2) we discuss how the choice of code smell detectors affects results, and (3) we analyze the impact of software domain on existence of the smell collocations. Additionally, we found that analytical methods we used to discover collocations, are complementary. Smells collocations display recurring patterns that could help prioritizing the classes affected by code smells to be refactored and developing or enhancing detectors exploiting information about collocations. They can also help the developers focusing on classes deserving more maintenance effort.},
	journal = {Journal of Systems and Software},
	author = {Walter, Bartosz and Fontana, Francesca Arcelli and Ferme, Vincenzo},
	year = {2018},
	keywords = {Code smells, Code smell detectors, Collocated smells, Inter-smell relationships, Smell interaction, Source code quality},
	pages = {1 -- 21},
	file = {Walter et al. - 2018 - Code smells and their collocations A large-scale .pdf:/home/rodger/Zotero/storage/IFES8CQ9/Walter et al. - 2018 - Code smells and their collocations A large-scale .pdf:application/pdf}
}

@article{afjehei_iperfdetector:_2019,
	title = {{iPerfDetector}: {Characterizing} and detecting performance anti-patterns in {iOS} applications},
	issn = {1573-7616},
	url = {https://doi.org/10.1007/s10664-019-09703-y},
	doi = {10.1007/s10664-019-09703-y},
	abstract = {Performance issues in mobile applications (i.e., apps) often have a direct impact on the user experience. However, due to limited testing resources and fast-paced software development cycles, many performance issues remain undiscovered when the apps are released. As found by a prior study, these performance issues are one of the most common complaints that app users have. Unfortunately, there is a limited support to help developers avoid or detect performance issues in mobile apps. In this paper, we conduct an empirical study on performance issues in iOS apps written in Swift language. To the best of our knowledge, this is the first study on performance issues of apps on the iOS platform. We manually studied 225 performance issues that are collected from four open source iOS apps. We found that most performance issues in iOS apps are related to inefficient UI design, memory issues, and inefficient thread handling. We also manually uncovered four performance anti-patterns that recurred in the studied issue reports. To help developers avoid these performance anti-patterns in the code, we implemented a static analysis tool called iPerfDetector. We evaluated iPerfDetector on eight open source and three commercial apps. iPerfDetector successfully detected 34 performance anti-pattern instances in the studied apps, where 31 of them are already confirmed and accepted by developers as potential performance issues. Our case study on the performance impact of the anti-patterns shows that fixing the anti-pattern may improve the performance (i.e., response time, GPU, or CPU) of the workload by up to 80\%.},
	journal = {Empirical Software Engineering},
	author = {Afjehei, Sara Seif and Chen, Tse-Hsun (Peter) and Tsantalis, Nikolaos},
	month = apr,
	year = {2019},
	file = {Afjehei et al. - 2019 - iPerfDetector Characterizing and detecting perfor.pdf:/home/rodger/Zotero/storage/LJ5Z7SFD/Afjehei et al. - 2019 - iPerfDetector Characterizing and detecting perfor.pdf:application/pdf}
}

@inproceedings{tian_how_2019,
	title = {How {Developers} {Discuss} {Architecture} {Smells}? {An} {Exploratory} {Study} on {Stack} {Overflow}},
	doi = {10.1109/ICSA.2019.00018},
	booktitle = {2019 {IEEE} {International} {Conference} on {Software} {Architecture} ({ICSA})},
	author = {Tian, F. and Liang, P. and Babar, M. A.},
	month = mar,
	year = {2019},
	keywords = {software maintenance, software quality, Software systems, Architecture Refactoring, Architecture Smell, Architecture Smells, Computer architecture, Computer science, Data mining, detecting refactoring ASs, developers discuss architecture Smells, Filtering, grounded theory method, Quality Attribute, software architecture, Stack Overflow, system quality attributes, system reusability, system testability, Tools},
	pages = {91--100},
	file = {Tian et al. - 2019 - How Developers Discuss Architecture Smells An Exp.pdf:/home/rodger/Zotero/storage/3B3AHVPC/Tian et al. - 2019 - How Developers Discuss Architecture Smells An Exp.pdf:application/pdf}
}

@inproceedings{vassallo_automated_2019,
	address = {Piscataway, NJ, USA},
	series = {{ICSE} '19},
	title = {Automated {Reporting} of {Anti}-patterns and {Decay} in {Continuous} {Integration}},
	url = {https://doi.org/10.1109/ICSE.2019.00028},
	doi = {10.1109/ICSE.2019.00028},
	booktitle = {Proceedings of the 41st {International} {Conference} on {Software} {Engineering}},
	publisher = {IEEE Press},
	author = {Vassallo, Carmine and Proksch, Sebastian and Gall, Harald C. and Di Penta, Massimiliano},
	year = {2019},
	note = {event-place: Montreal, Quebec, Canada},
	keywords = {anti-pattern, CI-Decay, CI-Smell, continuous integration, detection},
	pages = {105--115},
	file = {Vassallo et al. - 2019 - Automated Reporting of Anti-patterns and Decay in .pdf:/home/rodger/Zotero/storage/I3A6GPN9/Vassallo et al. - 2019 - Automated Reporting of Anti-patterns and Decay in .pdf:application/pdf}
}

@book{taibi_microservices_2019,
	title = {Microservices {Anti} {Patterns}: {A} {Taxonomy}},
	author = {Taibi, Davide and Lenarduzzi, Valentina and Pahl, Claus},
	year = {2019},
	file = {Taibi et al. - 2019 - Microservices Anti Patterns A Taxonomy.pdf:/home/rodger/Zotero/storage/5IEGVEGJ/Taibi et al. - 2019 - Microservices Anti Patterns A Taxonomy.pdf:application/pdf}
}

@inproceedings{tahir_can_2018,
	address = {New York, NY, USA},
	series = {{EASE}'18},
	title = {Can {You} {Tell} {Me} if {It} {Smells}?: {A} {Study} on {How} {Developers} {Discuss} {Code} {Smells} and {Anti}-patterns in {Stack} {Overflow}},
	isbn = {978-1-4503-6403-4},
	url = {http://doi.acm.org/10.1145/3210459.3210466},
	doi = {10.1145/3210459.3210466},
	booktitle = {Proceedings of the 22Nd {International} {Conference} on {Evaluation} and {Assessment} in {Software} {Engineering} 2018},
	publisher = {ACM},
	author = {Tahir, Amjed and Yamashita, Aiko and Licorish, Sherlock and Dietrich, Jens and Counsell, Steve},
	year = {2018},
	note = {event-place: Christchurch, New Zealand},
	keywords = {empirical study, Code smells, Stack Overflow, anti-patterns, mining software repositories},
	pages = {68--78},
	file = {Tahir et al. - 2018 - Can You Tell Me if It Smells A Study on How Deve.pdf:/home/rodger/Zotero/storage/QUDX2IGK/Tahir et al. - 2018 - Can You Tell Me if It Smells A Study on How Deve.pdf:application/pdf}
}

@article{ibrahim_reducing_2018,
	title = {Reducing redundancy of test cases generation using code smell detection and refactoring},
	issn = {1319-1578},
	url = {http://www.sciencedirect.com/science/article/pii/S1319157818300296},
	doi = {https://doi.org/10.1016/j.jksuci.2018.06.005},
	abstract = {In software development life cycle (SDLC), the testing phase is important to test the functionalities of any software. In this phase, test cases are generated to test software functionalities. This paper presents an approach on how to detect and refactor code smells from the source codes of an Android application in order to reduce the redundancy in test case generation. Refactoring is one of the vital activities in software development and maintenance. Refactoring is a process of code alteration that aims to make structural modifications to the source code without altering any external functionality. These changes often improve software quality such as readability, execution time and maintainability. The proposed approach is then implemented and evaluated in order to determine its effectiveness in reducing the redundancy of test case generation.},
	journal = {Journal of King Saud University - Computer and Information Sciences},
	author = {Ibrahim, Rosziati and Ahmed, Maryam and Nayak, Richi and Jamel, Sapiee},
	year = {2018},
	keywords = {Refactoring, Code smell detection, Duplicate code smell, Lazy class, Small method},
	file = {Ibrahim et al. - 2018 - Reducing redundancy of test cases generation using.pdf:/home/rodger/Zotero/storage/298RRE2V/Ibrahim et al. - 2018 - Reducing redundancy of test cases generation using.pdf:application/pdf}
}