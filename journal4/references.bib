
@inproceedings{mantyla_taxonomy_2003,
	title = {A taxonomy and an initial empirical study of bad smells in code},
	doi = {10.1109/ICSM.2003.1235447},
	booktitle = {International {Conference} on {Software} {Maintenance}, 2003. {ICSM} 2003. {Proceedings}.},
	author = {Mantyla, M. and Vanhanen, J. and Lassenius, C.},
	month = sep,
	year = {2003},
	keywords = {Internet, bad code smells, Cloning, code quality, correlations, empirical study, Logic, object-oriented context, object-oriented programming, program compilers, Programming, software maintenance, Software maintenance, Software measurement, software performance evaluation, software quality, Software quality, Software systems, taxonomy, Taxonomy, Visualization},
	pages = {381--384},
	file = {Mantyla et al. - 2003 - A taxonomy and an initial empirical study of bad s.pdf:/home/rodger/Zotero/storage/E3HQT7RF/Mantyla et al. - 2003 - A taxonomy and an initial empirical study of bad s.pdf:application/pdf}
}

@inproceedings{arcoverde_understanding_2011,
	address = {New York, NY, USA},
	series = {{WRT} '11},
	title = {Understanding the {Longevity} of {Code} {Smells}: {Preliminary} {Results} of an {Explanatory} {Survey}},
	isbn = {978-1-4503-0579-2},
	url = {http://doi.acm.org/10.1145/1984732.1984740},
	doi = {10.1145/1984732.1984740},
	booktitle = {Proceedings of the 4th {Workshop} on {Refactoring} {Tools}},
	publisher = {ACM},
	author = {Arcoverde, Roberta and Garcia, Alessandro and Figueiredo, Eduardo},
	year = {2011},
	note = {event-place: Waikiki, Honolulu, HI, USA},
	keywords = {empirical study, code smells, refactoring},
	pages = {33--36},
	file = {Arcoverde et al. - 2011 - Understanding the Longevity of Code Smells Prelim.pdf:/home/rodger/Zotero/storage/X8X8XNAT/Arcoverde et al. - 2011 - Understanding the Longevity of Code Smells Prelim.pdf:application/pdf}
}

@inproceedings{yamashita_developers_nodate,
	title = {Do developers care about code smells? {An} exploratory survey},
	doi = {10.1109/WCRE.2013.6671299},
	author = {Yamashita, A. and Moonen, L.},
	month = oct,
	pages = {242--251},
	file = {Yamashita and Moonen - Do developers care about code smells An explorato.pdf:/home/rodger/Zotero/storage/YXU7ZHR4/Yamashita and Moonen - Do developers care about code smells An explorato.pdf:application/pdf}
}

@article{garousi_smells_2018,
	title = {Smells in software test code: {A} survey of knowledge in industry and academia},
	volume = {138},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121217303060},
	doi = {https://doi.org/10.1016/j.jss.2017.12.013},
	abstract = {As a type of anti-pattern, test smells are defined as poorly designed tests and their presence may negatively affect the quality of test suites and production code. Test smells are the subject of active discussions among practitioners and researchers, and various guidelines to handle smells are constantly offered for smell prevention, smell detection, and smell correction. Since there is a vast grey literature as well as a large body of research studies in this domain, it is not practical for practitioners and researchers to locate and synthesize such a large literature. Motivated by the above need and to find out what we, as the community, know about smells in test code, we conducted a ‘multivocal’ literature mapping (classification) on both the scientific literature and also practitioners’ grey literature. By surveying all the sources on test smells in both industry (120 sources) and academia (46 sources), 166 sources in total, our review presents the largest catalogue of test smells, along with the summary of guidelines/techniques and the tools to deal with those smells. This article aims to benefit the readers (both practitioners and researchers) by serving as an “index” to the vast body of knowledge in this important area, and by helping them develop high-quality test scripts, and minimize occurrences of test smells and their negative consequences in large test automation projects.},
	journal = {Journal of Systems and Software},
	author = {Garousi, Vahid and Küçük, Barış},
	year = {2018},
	keywords = {Automated testing, Multivocal literature mapping, Software testing, Survey, Systematic mapping, Test anti-patterns, Test automation, Test scripts, Test smells},
	pages = {52 -- 81},
	file = {Garousi and Küçük - 2018 - Smells in software test code A survey of knowledg.pdf:/home/rodger/Zotero/storage/8IJDPDPI/Garousi and Küçük - 2018 - Smells in software test code A survey of knowledg.pdf:application/pdf}
}

@article{yoshioka_survey_2008,
	title = {A survey on security patterns},
	issn = {1349-8614, 1349-8606},
	url = {http://www.nii.ac.jp/pi/n5/5_35.html},
	doi = {10.2201/NiiPi.2008.5.5},
	abstract = {Security has become an important topic for many software systems. Security patterns are reusable solutions to security problems. Although many security patterns and techniques for using them have been proposed, it is still difﬁcult to adapt security patterns to each phase of software development. This paper provides a survey of approaches to security patterns. As a result of classifying these approaches, a direction for the integration and future research topics is illustrated.},
	language = {en},
	number = {5},
	urldate = {2019-09-22},
	journal = {Progress in Informatics},
	author = {Yoshioka, Nobukazu and Washizaki, Hironori and Maruyama, Katsuhisa},
	month = mar,
	year = {2008},
	pages = {35},
	annote = {This is a security pattern paper not an anti pattern paper, also very old.},
	file = {Yoshioka et al. - 2008 - A survey on security patterns.pdf:/home/rodger/Zotero/storage/7SQCG3TU/Yoshioka et al. - 2008 - A survey on security patterns.pdf:application/pdf}
}

@article{sharma_survey_2018,
	title = {A survey on software smells},
	volume = {138},
	issn = {0164-1212},
	url = {http://www.sciencedirect.com/science/article/pii/S0164121217303114},
	doi = {https://doi.org/10.1016/j.jss.2017.12.034},
	abstract = {Context Smells in software systems impair software quality and make them hard to maintain and evolve. The software engineering community has explored various dimensions concerning smells and produced extensive research related to smells. The plethora of information poses challenges to the community to comprehend the state-of-the-art tools and techniques. Objective We aim to present the current knowledge related to software smells and identify challenges as well as opportunities in the current practices. Method We explore the definitions of smells, their causes as well as effects, and their detection mechanisms presented in the current literature. We studied 445 primary studies in detail, synthesized the information, and documented our observations. Results The study reveals five possible defining characteristics of smells — indicator, poor solution, violates best-practices, impacts quality, and recurrence. We curate ten common factors that cause smells to occur including lack of skill or awareness and priority to features over quality. We classify existing smell detection methods into five groups — metrics, rules/heuristics, history, machine learning, and optimization-based detection. Challenges in the smells detection include the tools’ proneness to false-positives and poor coverage of smells detectable by existing tools.},
	journal = {Journal of Systems and Software},
	author = {Sharma, Tushar and Spinellis, Diomidis},
	year = {2018},
	keywords = {Software quality, Antipatterns, Code smells, Maintainability, Smell detection tools, Software smells, Technical debt},
	pages = {158 -- 173},
	annote = {Kent Beck coined the term code smell},
	file = {Sharma and Spinellis - 2018 - A survey on software smells.pdf:/home/rodger/Zotero/storage/H23FHZG6/Sharma and Spinellis - 2018 - A survey on software smells.pdf:application/pdf}
}

@inproceedings{gopstein_understanding_2017,
	address = {New York, NY, USA},
	series = {{ESEC}/{FSE} 2017},
	title = {Understanding {Misunderstandings} in {Source} {Code}},
	isbn = {978-1-4503-5105-8},
	url = {http://doi.acm.org/10.1145/3106237.3106264},
	doi = {10.1145/3106237.3106264},
	booktitle = {Proceedings of the 2017 11th {Joint} {Meeting} on {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Gopstein, Dan and Iannacone, Jake and Yan, Yu and DeLong, Lois and Zhuang, Yanyan and Yeh, Martin K.-C. and Cappos, Justin},
	year = {2017},
	note = {event-place: Paderborn, Germany},
	keywords = {Program Understanding, Programming Languages},
	pages = {129--139},
	file = {Gopstein et al. - 2017 - Understanding Misunderstandings in Source Code.pdf:/home/rodger/Zotero/storage/9MFMG3I9/Gopstein et al. - 2017 - Understanding Misunderstandings in Source Code.pdf:application/pdf}
}

@article{singh_systematic_2018,
	title = {A systematic literature review: {Refactoring} for disclosing code smells in object oriented software},
	volume = {9},
	issn = {2090-4479},
	url = {http://www.sciencedirect.com/science/article/pii/S2090447917300412},
	doi = {https://doi.org/10.1016/j.asej.2017.03.002},
	abstract = {Context Reusing a design pattern is not always in the favor of developers. Thus, the code starts smelling. The presence of “Code Smells” leads to more difficulties for the developers. This racket of code smells is sometimes called Anti-Patterns. Objective The paper aimed at a systematic literature review of refactoring with respect to code smells. However the review of refactoring is done in general and the identification of code smells and anti-patterns is performed in depth. Method A systematic literature survey has been performed on 238 research items that includes articles from leading Conferences, Workshops and premier journals, theses of researchers and book chapters. Results Several data sets and tools for performing refactoring have been revealed under the specified research questions. Conclusion The work done in the paper is an addition to prior systematic literature surveys. With the study of paper the attentiveness of readers about code smells and anti-patterns will be enhanced.},
	number = {4},
	journal = {Ain Shams Engineering Journal},
	author = {Singh, Satwinder and Kaur, Sharanpreet},
	year = {2018},
	keywords = {Anti-patterns, Code smells, Refactoring},
	pages = {2129 -- 2151},
	file = {Singh and Kaur - 2018 - A systematic literature review Refactoring for di.pdf:/home/rodger/Zotero/storage/LNW3WWX6/Singh and Kaur - 2018 - A systematic literature review Refactoring for di.pdf:application/pdf}
}